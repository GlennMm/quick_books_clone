// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model AccountType {
  id   String @id @default(cuid())
  name String

  Accounts Accounts[]
}

model Accounts {
  id             String           @id @default(cuid())
  name           String
  balnaceTotal   Float
  accountType    AccountType      @relation(fields: [accountTypeId], references: [id])
  currency       Currency         @relation(fields: [currencyId], references: [id])
  accountRecords AccountRecords[]
  accountTypeId  String
  currencyId     String
}

model AccountRecords {
  id             String    @id @default(cuid())
  date           DateTime
  transctionType String
  accountName    String // TODO re-visit later
  payment        Float
  deposit        Float
  balance        Float
  Accounts       Accounts? @relation(fields: [accountsId], references: [id])
  accountsId     String?
}

model Currency {
  id            String          @id @default(cuid())
  name          String
  base          Boolean
  rate          Float
  Accounts      Accounts[]
  Supplier      Supplier[]
  PurchaseOrder PurchaseOrder[]
  SalesOrder    SalesOrder[]
  Payment       Payment[]
}

model Address {
  id          String @id @default(cuid())
  companyName String
  fullname    String
  jobTitle    String
  phone       String
  email       String
  shippedFrom String

  // TODO payment settigns, vat settings, account settings, additional info
}

model Supplier {
  id             String   @id @default(cuid())
  name           String
  address        String
  currency       Currency @relation(fields: [currencyId], references: [id])
  openingBalance Float

  currencyId    String
  PurchaseOrder PurchaseOrder[]
}

model PurchaseOrder {
  id         String       @id @default(cuid())
  supplier   Supplier     @relation(fields: [supplierId], references: [id])
  items      StockOrder[]
  vat        Vat          @relation(fields: [vatId], references: [id])
  date       DateTime
  po_no      String
  currency   Currency     @relation(fields: [currencyId], references: [id])
  supplierId String
  vatId      String
  currencyId String
}

model Customer {
  id   String @id @default(cuid())
  name String
  // TODO same as

  SalesOrder SalesOrder[]
  Invoice    Invoice[]
  Payment    Payment[]
  CreditNote CreditNote[]
}

model StockType {
  id    String  @id @default(cuid())
  name  String
  Stock Stock[]
}

model UnitsOfMeasure {
  id    String  @id @default(cuid())
  name  String
  abrev String
  Stock Stock[]
}

model Stock {
  id               String         @id @default(cuid())
  name             String
  price            Decimal
  description      String
  stock_type       StockType      @relation(fields: [stockTypeId], references: [id])
  units_of_measure UnitsOfMeasure @relation(fields: [unitsOfMeasureId], references: [id])
  rate             Decimal
  vat              Vat            @relation(fields: [vatId], references: [id])
  incl_vat         Boolean
  active           Boolean

  stockTypeId      String
  unitsOfMeasureId String
  vatId            String
  StockOrder       StockOrder[]
  SalesOrder       SalesOrder?  @relation(fields: [salesOrderId], references: [id])
  salesOrderId     String?
}

model StockOrder {
  id              String         @id @default(cuid())
  stock           Stock          @relation(fields: [stockId], references: [id])
  quantity        Int
  PurchaseOrder   PurchaseOrder? @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId String?
  stockId         String
  CreditNote      CreditNote[]
}

model Vat {
  id            String          @id @default(cuid())
  PurchaseOrder PurchaseOrder[]
  Stock         Stock[]
  SalesOrder    SalesOrder[]
}

model SalesOrder {
  id         String    @id @default(cuid())
  customer   Customer  @relation(fields: [customerId], references: [id])
  product    Stock[]
  vat        Vat       @relation(fields: [vatId], references: [id])
  currency   Currency  @relation(fields: [currencyId], references: [id])
  message    String?
  customerId String
  vatId      String
  currencyId String
  Invoice    Invoice[]
}

enum PaymentStatus {
  unpaid
  partially
  fully
}

model Invoice {
  id           String        @id @default(cuid())
  customer     Customer      @relation(fields: [customerId], references: [id])
  salesOrder   SalesOrder    @relation(fields: [salesOrderId], references: [id])
  status       PaymentStatus
  customerId   String
  salesOrderId String
  Payment      Payment[]
}

model Payment {
  id         String   @id @default(cuid())
  customer   Customer @relation(fields: [customerId], references: [id])
  invoice    Invoice  @relation(fields: [invoiceId], references: [id])
  reference  String
  date       DateTime
  currebcy   Currency @relation(fields: [currencyId], references: [id])
  customerId String
  invoiceId  String
  currencyId String
}

// todo refunds or sales return
model CreditNote {
  id           String     @id @default(cuid())
  customer     Customer   @relation(fields: [customerId], references: [id])
  items        StockOrder @relation(fields: [stockOrderId], references: [id])
  total        Decimal
  date         DateTime
  customerId   String
  stockOrderId String
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Gender {
  male
  female
}

model Addres {
  id        String @id @default(cuid())
  address   String
  city_town String
  state     String
  zip       String
  country   String
  email     String
  phone     String
  mobile    String

  User User[]
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  title         String
  fullanme      String
  natId         String
  gender        Gender
  dob           DateTime
  maritalStatus MaritalStatus
  address       Addres        @relation(fields: [addresId], references: [id])
  employeeNo    String
  dateJoined    DateTime
  leavingDate   DateTime
  pay           Decimal

  addresId String
}

enum MaritalStatus {
  married
  single
  divorced
  widowed
  situationship
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
